# -*- org-download-image-dir: "images"; -*-
#+title: Structure and Interpretation of Classical Mechanics
#+subtitle: Computational Physics!
#+startup: indent
#+date: 2020-05-26

Welcome to my tour of Structure and Interpretation of Classical Mechanics. I'm
working on this book to develop my sense of the best way to do research in
public; this book is heavy on math, programming and visualization, and should
stress the normal tools.

I'm attempting to take notes in on org-mode file, and generate all my code from
there.

I don't think I have the heart, or the time, to really do high-class notes of
every single section; but I am going to do each of the exercises, and explore
some of the code-based concepts in each section.

* Preface
:PROPERTIES:
:UNNUMBERED: t
:END:

The preface is already intriguing. A tour through the new notation, plus some
discussion of why a programming language is the best route in to this stuff.
Both of these are extremely powerful ideas, and why I was pulled to this book in
the first place.

The functional notation is:

\begin{equation}
  D (\partial_2 L \circ \Gamma[q]) - (\partial_1 L \circ \Gamma[q]) = 0
\end{equation}

Compare that to the traditional notation:

\begin{equation}
  \frac{d}{dt} \frac{\partial L}{\partial \dot q^i} -\frac{\partial L}{\partial q^i}= 0
\end{equation}

They have a nice riff on how this is totally ambiguous. $\Gamma$ is not a great
way to go.

* Lagrangian Mechanics
  :PROPERTIES:
  :header-args: :eval no-export :padline no
  :END:

** Exercise 1.1: Degrees of Freedom and 1.2: Generalized Coordinates

#+begin_quote
For each of the mechanical systems described below, give the number of degrees
of freedom of the configuration space. ([[https://tgvaughan.github.io/sicm/chapter001.html#Exe_1-1][SICM, ex1]])
#+end_quote

[[https://tgvaughan.github.io/sicm/chapter001.html#Exe_1-2][Exercise 1.2]] asks about the generalized coordinates of each, so I'll note those
here too.

1. Three juggling pins.

   **18 degrees of freedom** for three juggling pins - 3 position, 3 angles for
   each. OR **15** total, if you assume that the pin is symmetric; then you just
   need two degrees of tilt.

2. A spherical pendulum consisting of a point mass (the pendulum bob) hanging
   from a rigid massless rod attached to a fixed support point. The pendulum bob
   may move in any direction subject to the constraint imposed by the rigid rod.
   The point mass is subject to the uniform force of gravity.

   Spherical pendulum,hanging from a fixed support has **two degrees of
   freedom**, one for each angle.

3. Spherical DOUBLE pendulum has **four degrees of freedom**; two angles from
   previous, plus two more angles for the second pendulum off of the first.

   A spherical double pendulum, consisting of one point mass hanging from a
   rigid massless rod attached to a second point mass hanging from a second
   massless rod attached to a fixed support point. The point masses are subject
   to the uniform force of gravity.

4. A point mass sliding without friction on a rigid curved wire.

   **1 degree of freedom**, distance along the wire.

5. A top consisting of a rigid axisymmetric body with one point on the symmetry
   axis of the body attached to a fixed support, subject to a uniform
   gravitational force.

   Axisymmetric top has **TWO degrees of freedom**, for the angles off of
   vertical. But then we can't talk about its speed, so that's a little strange.
   I guess it has an angular momentum as a property, but that's not a
   coordinate.

6. The same as e, but not axisymmetric.

   We now have **THREE degrees of freedom**, one more for the angle of the top's
   rotation.

** Exercise 1.3: Fermat optics
:PROPERTIES:
:header-args+: :tangle ch1/ex1-3.scm :comments org
:END:

#+begin_src scheme :exports none
(load "ch1/utils.scm")
#+end_src

#+RESULTS:
: ;Loading "ch1/utils.scm"...
: ;  Loading "ch1/exdisplay.scm"... done
: ;... done
: #| check-f |#

This problem has us exploring some consequences for optics of the principle of
least time. [[https://tgvaughan.github.io/sicm/chapter001.html#Exe_1-3][Exercise 1.3]] states:

#+begin_quote
Fermat observed that the laws of reflection and refraction could be accounted
for by the following facts: Light travels in a straight line in any particular
medium with a velocity that depends upon the medium. The path taken by a ray
from a source to a destination through any sequence of media is a path of least
total time, compared to neighboring paths. Show that these facts imply the laws
of reflection and refraction.
#+end_quote

*** Law of Reflection

The [[https://en.wikipedia.org/wiki/Reflection_(physics)#Laws_of_reflection][law of reflection]] is described in the footnote:

#+begin_quote
For reflection the angle of incidence is equal to the angle of reflection.
#+end_quote

Here's the setup. The horizontal line is a mirror. The law states that $\theta_1
= \theta_2$.

#+DOWNLOADED: screenshot @ 2020-06-10 10:31:24
#+attr_org: :width 400px
#+attr_html: :width 80% :align center
#+attr_latex: :width 8cm
[[file:images/Lagrangian_Mechanics/2020-06-10_10-31-24_screenshot.png]]

We have to show that if we consider all possible paths from a given starting
point to a given endpoint, the path of minimum time will give us the law of
reflection.

The /actual/ path of minimum time is the straight line that avoids the mirror,
of course. If we force the light to bounce off of the mirror, then we have to
figure out where it will hit, where $x_p$ is, to minimize the time between the
start and end points.

There are two ways to solve this problem. We can use geometry and visual
intuition, or we can use calculus.

**** Geometry

First, recall this fact from the problem text:

#+begin_quote
Light travels in a straight line in any particular medium with a velocity that
depends upon the medium.
#+end_quote

There's no medium change, so if there were no mirror in its path, the light beam
would continue in a straight line. Instead of figuring out what the beam will do
when it hits the mirror, reflect the endpoint across the mirror and draw a
straight line between the start and "end" points:

#+DOWNLOADED: screenshot @ 2020-06-10 10:36:53
#+attr_org: :width 400px
#+attr_html: :width 80% :align center
#+attr_latex: :width 8cm
[[file:images/Lagrangian_Mechanics/2020-06-10_10-36-53_screenshot.png]]

The angle that the beam makes with the plane of the mirror is the same on both
sides of the mirror.

Now reflect the the "end" point and the segment of the beam that's crossed the
mirror back up. By symmetry, $\theta_1 = \theta_2$, and we've proved the law of
reflection.

**** Calculus

We can also solve this with calculus. Because the beam doesn't change media, its
speed $v$ stays constant, so minimizing the total distance $d$ is equivalent to
minimizing the time $t = {d \over v}$.

Set $x_1 = 0$ for convenience, and write the total distance the light travels as
a function of $x_p$:

\begin{equation}
d(x_p) = \sqrt{y_1^2 + x_p^2} + \sqrt{(x_2 - x_p)^2 + y_2^2}
\end{equation}

For practice, we can also define this function in Scheme.

#+begin_src scheme
(define ((total-distance x1 y1 x2 y2) xp)
  (+ (sqrt (+ (square (+ x1 xp))
              (square y1)))
     (sqrt (+ (square (- x2 (+ x1 xp)))
              (square y2)))))
#+end_src

#+RESULTS:
: #| total-distance |#

Here's the function again, generated from code, with general $t_1$:

#+begin_src scheme :results value raw :exports both :cache yes
(->tex-equation
 ((total-distance 'x_1 'y_1 'x_2 'y_2) 'x_p))
#+end_src

#+RESULTS[084acf42d4fe771c97db9cf39e92c75383662d30]:
\begin{equation}
\sqrt{{{x}_{1}}^{2} + 2 {x}_{1} {x}_{p} + {{x}_{p}}^{2} + {{y}_{1}}^{2}} + \sqrt{{{x}_{1}}^{2} - 2 {x}_{1} {x}_{2} + 2 {x}_{1} {x}_{p} + {{x}_{2}}^{2} - 2 {x}_{2} {x}_{p} + {{x}_{p}}^{2} + {{y}_{2}}^{2}}
\end{equation}

To find the $x_p$ that minimizes the total distance,

- take the derivative with respect to $x_p$,
- set it equal to 0 and
- solve for $x_p$.

The derivative will look cleaner in code if we keep the components of the sum
separate and prevent Scheme from "simplifying". Redefine the function to return
a tuple:

#+begin_src scheme
(define ((total-distance* x1 y1 x2 y2) xp)
  (up (sqrt (+ (square (+ x1 xp))
               (square y1)))
      (sqrt (+ (square (- x2 (+ x1 xp)))
               (square y2)))))
#+end_src

#+RESULTS:
: #| total-distance* |#

Here are the sum components:

#+begin_src scheme :results value raw :exports both :cache yes
(->tex-equation
 ((total-distance* 0 'y_1 'x_2 'y_2) 'x_p))
#+end_src

#+RESULTS[8080e49ee342b7a2a69c9c84337c37bc473a3c58]:
\begin{equation}
\begin{pmatrix} \displaystyle{ \sqrt{{{x}_{p}}^{2} + {{y}_{1}}^{2}}} \cr \cr \displaystyle{ \sqrt{{{x}_{2}}^{2} - 2 {x}_{2} {x}_{p} + {{x}_{p}}^{2} + {{y}_{2}}^{2}}}\end{pmatrix}
\end{equation}

Taking a derivative is easy with =scmutils=. Just wrap the function in =D=:

#+begin_src scheme :results value raw :exports both :cache yes
(let* ((distance-fn (total-distance* 0 'y_1 'x_2 'y_2))
       (derivative (D distance-fn)))
  (->tex-equation
   (derivative 'x_p)))
#+end_src

#+RESULTS[5bbf36ca4a362ee2f2d2423071a6f818c8c93cab]:
\begin{equation}
\begin{pmatrix} \displaystyle{ {{{x}_{p}}\over {\sqrt{{{x}_{p}}^{2} + {{y}_{1}}^{2}}}}} \cr \cr \displaystyle{ {{ - {x}_{2} + {x}_{p}}\over {\sqrt{{{x}_{2}}^{2} - 2 {x}_{2} {x}_{p} + {{x}_{p}}^{2} + {{y}_{2}}^{2}}}}}\end{pmatrix}
\end{equation}

The first component is the base of base $x_p$ of the left triangle over the
total length. This ratio is equal to $\cos \theta_1$:

#+DOWNLOADED: screenshot @ 2020-06-10 10:36:53
#+attr_org: :width 400px
#+attr_html: :width 80% :align center
#+attr_latex: :width 8cm
[[file:images/Lagrangian_Mechanics/2020-06-10_10-36-53_screenshot.png]]

The bottom component is $-\cos \theta_2$, or ${- (x_2 - x_p)}$ over the length
of the right segment. Add these terms together, set them equal to 0 and
rearrange:

\begin{equation}
\label{eq:reflect-laws}
\cos \theta_1 = \cos \theta_2 \implies \theta_1 = \theta_2
\end{equation}

This description in terms of the two incident angles isn't so obvious from the
Scheme code. Still, you can use Scheme to check this result.

If the two angles are equal, then the left and right triangles are similar, and
the ratio of each base to height is equal:

\begin{equation}
\label{eq:reflect-ratio}
{x_p \over y_1} = {{x_2 - x_p} \over y_2}
\end{equation}

Solve for $x_p$ and rearrange:

\begin{equation}
\label{eq:reflect-ratio2}
x_p = {{y_1 x_2} \over {y_1 + y_2}}
\end{equation}

Plug this in to the derivative of the original =total-distance= function, and we
find that the derivative equals 0, as expected:

#+begin_src scheme :results value raw :exports both :cache yes
(let* ((distance-fn (total-distance 0 'y_1 'x_2 'y_2))
       (derivative (D distance-fn)))
  (->tex-equation
   (derivative (/ (* 'y_1 'x_2) (+ 'y_1 'y_2)))))
#+end_src

#+RESULTS[535d1b50ac55ba86347a21920c8bbf87153148eb]:
\begin{equation}
0
\end{equation}

If a beam of light travels in a way that minimizes total distance (and therefore
time in a constant medium), then it will reflect off of a mirror with the same
angle at which it arrived. The law of reflection holds.

*** Law of Refraction

The law of refraction is also called [[https://en.wikipedia.org/wiki/Snell%27s_law][Snell's law]]. Here's the description from
the footnote:

#+begin_quote
Refraction is described by Snell's law: when light passes from one medium to
another, the ratio of the sines of the angles made to the normal to the
interface is the inverse of the ratio of the refractive indices of the media.
The refractive index is the ratio of the speed of light in the vacuum to the
speed of light in the medium.
#+end_quote

First we'll tackle this with calculus.

**** Calculus

The setup here is slightly different. We have a light beam traveling from one
medium to another and changing speeds at a boundary located $a$ to the right of
the starting point. The goal is to figure out the point where the light will hit
the boundary, if we assume that the light will take the path of least time.

#+DOWNLOADED: screenshot @ 2020-06-10 12:03:11
#+attr_org: :width 400px
#+attr_html: :width 80% :align center
#+attr_latex: :width 8cm
[[file:images/Lagrangian_Mechanics/2020-06-10_12-03-11_screenshot.png]]

The refractive index $n_i = {c \over v_i}$, the speed of light $c$ in a vacuum
over the speed in the material. Rearranging, $v_i = {c \over n_i}$.

Time is distance over speed, so the total time that the beam spends between the
start and end points as a function of $y_p$, the point of contact with the
boundary, is:

\begin{equation}
  \begin{split}
    t(y_p) & = {c \sqrt{a^2 + y_p^2}\over v_1} + {c \sqrt{(x_2 - x_p)^2 + y_2^2} \over v_2} \\
    & = {n_1 \over c} \sqrt{a^2 + y_p^2} + {n_2 \over c} \sqrt{(x_2 - x_p)^2 + y_2^2}
  \end{split}
\end{equation}

Take the derivative:

\begin{equation}
  Dt(y_p) = {1 \over c} \left({n_1 y_p \over \sqrt{a^2 + y_p^2}} - {n_2 (x_2 - x_p) \over \sqrt{(x_2 - x_p)^2 + y_2^2}}\right)
\end{equation}

Set the derivative equal to 0 and split terms:

\begin{equation}
\label{eq:almost-snell}
  {n_1 y_p \over \sqrt{a^2 + y_p^2}} = {n_2 (x_2 - x_p) \over \sqrt{(x_2 - x_p)^2 + y_2^2}}
\end{equation}

Similar to the law of reflection's result, each term (up to its $n_i$ multiple)
is equal to the height of the left or right triangle over the length of the
beam's path on the left or right of the boundary.

Equation \eqref{eq:almost-snell} simplifies to:

\begin{equation}
  n_1 \sin \theta_1 = n_2 \sin \theta_2
\end{equation}

Rearranging yields Snell's law:

\begin{equation}
{n_1 \over n_2} = {\sin \theta_2 \over \sin \theta_1}
\end{equation}

**** Geometry

I won't recreate this here, but the [[https://www.feynmanlectures.caltech.edu/I_26.html][Feynman Lectures on Physics]], in [[https://www.feynmanlectures.caltech.edu/I_26.html][Lecture 26]],
has a fantastic discussion about, and derivation of, the law of refraction using
no calculus, just geometry. I highly recommend you check out that lecture.
Feynman lays out a number of examples of how the principle of least time is not
just a restatement of the optical rules we already knew.

You can use the idea to guess what shape of mirror you'd want to build to focus
many light rays on a single point (a parabola), or how you might force all light
rays coming out of a single point to meet up again at another point (build a
converging lens).

This whole area of optics and least time has obsessed scientists for hundreds of
years. Spend a few minutes [[https://www.feynmanlectures.caltech.edu/I_26.html][poking around]] and see what you find.
** Section 1.4: Computing Actions
:PROPERTIES:
:header-args+: :tangle ch1/sec1-4.scm :comments org
:END:

#+begin_src scheme :exports none
(load "ch1/utils.scm")
#+end_src

This is the first demo of how any of this stuff works, starting on page 15.

Here's our first Lagrangian, super simple.

#+begin_src scheme
(define ((L-free-particle mass) local)
  (let ((v (velocity local)))
    (* 1/2 mass (dot-product v v))))
#+end_src

Suppose we let q denote a coordinate path function that maps time to position
components:

#+begin_src scheme
(define q
  (up (literal-function 'x)
      (literal-function 'y)
      (literal-function 'z)))
#+end_src

"Gamma" (looks like an L reflected across the origin) takes a coordinate path
and returns a function of time that gives the local tuple. Looks like that
fucker defaults to 2 levels deep, but you can call (Gamma 4) to get more derivatives.

The returned thing is called the "local tuple":

#+begin_src scheme
((Gamma q) 't)
#+end_src

This is just (t, q(t), (Dq)(t), ....) Where D is the derivative maybe of the
vector, which does partial derivatives along each component. (Q: can a component
of the coordinate path depend on the others? YES, and that would impose
constraints beyond the degrees of freedom.)

#+begin_src scheme
((compose (L-free-particle 'm) (Gamma q)) 't)
#+end_src

So this little bastard doesn't depend on the coordinate system you choose, as
long as its true that the lagrangian (kinetic energy equation) is the same for
all reference frames.

Lagrangian action! Minimal lagrangian action is key.

#+begin_src scheme
(define (Lagrangian-action L q t1 t2)
  (definite-integral (compose L (Gamma q)) t1 t2))
#+end_src

For a particle with mass 3, between 0 and 10... look at page 17 for an example
here. This is an example path:

#+begin_src scheme
(define (test-path t)
  (up (+ (* 4 t) 7)
      (+ (* 3 t) 5)
      (+ (* 2 t) 1)))
#+end_src

And we can run it here:

#+begin_src scheme
(Lagrangian-action (L-free-particle 3) test-path 0.0 10.0)
#+end_src

** Exercise 1.4: Lagrangian actions

#+begin_quote
For a free particle an appropriate Lagrangian is
#+end_quote

\begin{equation}
\label{eq:14lagrangian}
L(t, x, v) = {1 \over 2}mv^2
\end{equation}

#+begin_quote
Suppose that x is the constant-velocity straight-line path of a free particle,
such that $x_a = x(t_a)$ and $x_b = x(t_b)$. Show that the action on the
solution path is
#+end_quote

\begin{equation}
\label{eq:14result}
{m \over 2}{{(x_b - x_a)^2} \over {t_b - t_a}}
\end{equation}

The velocity is constant between the two points, so it must be equal to the
difference in position over the difference in time:

\begin{equation}
\label{eq:constant-v}
v = {{x(t_b) - x(t_a)} \over {t_b - t_a}} = {{x_b - x_a} \over {t_b - t_a}}
\end{equation}

The action is equal to:

\begin{equation}
  \label{eq:2}
  \begin{split}
    S[q](t_a, t_b) & = \int_{t_a}^{t_b} L(t, x, v) dx \\
    & = \int_{t_a}^{t_b} {1 \over 2}mv(t)^2 dx \\
    & = {m \over 2}{v(t)^2 t} \Bigr|_{t_a}^{t_b} \\
    & = {m \over 2}{v(t_b)^2 t_b - v(t_a)^2 t_a}
  \end{split}
\end{equation}

The velocity is constant, so substitute in equation \eqref{eq:constant-v} and
simplify:

\begin{equation}
  \label{eq:4}
  \begin{split}
    S[q](t_a, t_b) & = {m \over 2}{({{x_b - x_a} \over {t_b - t_a}})^2 (t_b - t_a)} \\
    & = {m \over 2}{(x_b - x_a)^2 \over {t_b - t_a}}
  \end{split}
\end{equation}

As expected.

** Paths of Minimum Action
:PROPERTIES:
:header-args+: :tangle ch1/min-action-paths.scm :comments org
:END:

#+begin_src scheme :exports none
(load "ch1/utils.scm")
#+end_src

Next, we'll take the old langrangian calculation for the straight line and fuck
with the line by small variations; or some small epsilon multiplied by the
effect of some other function added to the original q. Eta baby!

This makes a new function that has zeroes at t1 and t2.

#+begin_src scheme
(define ((make-eta nu t1 t2) t)
  (* (- t t1) (- t t2) (nu t)))
#+end_src

 Boom, calculate the action AGAIN for a path that's pretty close...
#+begin_src scheme
(define ((varied-free-particle-action mass q nu t1 t2) epsilon)
  (let ((eta (make-eta nu t1 t2)))
    (Lagrangian-action (L-free-particle mass)
                       (+ q (* epsilon eta))
                       t1
                       t2)))

(let ((action-fn (varied-free-particle-action 3 test-path
                                              (up sin cos square)
                                              0.0 10.0)))
  (action-fn 0.001))
#+end_src


Now we can do a minimization over -2.0 to 1.0:

#+begin_src scheme
(let ((action-fn (varied-free-particle-action
                  3.0 test-path
                  (up sin cos square)
                  0.0 10.0)))
  (minimize action-fn -2.0 1.0))
#+end_src

*** Finding trajectories that minimize action

First build up a function that hits all the listed points.

#+begin_src scheme
(define (make-path t0 q0 t1 q1 qs)
  (let ((n (length qs)))
    (let ((ts (linear-interpolants t0 t1 n)))
      (Lagrange-interpolation-function
       (append (list q0) qs (list q1))
       (append (list t0) ts (list t1))))))

(define ((parametric-path-action L t0 q0 t1 q1) qs)
  (let ((path (make-path t0 q0 t1 q1 qs)))
    (Lagrangian-action L path t0 t1)))

(define (find-path L t0 q0 t1 q1 n)
  (let ((initial-qs (linear-interpolants q0 q1 n)))
    (let ((minimizing-qs
           (multidimensional-minimize
            (parametric-path-action L t0 q0 t1 q1)
            initial-qs)))
      (make-path t0 q0 t1 q1 minimizing-qs))))
#+end_src

That's pretty sick. Now we can write a version that does some mother fucking
plotting. First, a new lagrangian for a spring system. This one's the difference
between the kinetic and potential energies of a spring system.

#+begin_src scheme
(define ((L-harmonic m k) local)
  (let ((q (coordinate local))
        (v (velocity local)))
    (- (* 1/2 m (square v)) (* 1/2 k (square q)))))
#+end_src

** Exercise 1.5: Solution process
:PROPERTIES:
:header-args+: :tangle ch1/ex1-5.scm :comments org
:END:

watch the progress of the minimization. This is not great design, since we're
overwriting the previous function and depending on the closure, but let's
follow the text.

#+begin_src scheme :exports none
(load "ch1/utils.scm")
#+end_src

Defines a window:

#+begin_src scheme
(define win2
  (frame 0. :pi/2 0. 1.2))
#+end_src

new version of this that prints:

#+begin_src scheme
(define ((parametric-path-action Lagrangian t0 q0 t1 q1)
         intermediate-qs)
  (let ((path (make-path t0 q0 t1 q1 intermediate-qs)))
    ;; display path
    (graphics-clear win2)
    (plot-function win2 path t0 t1 (/ (- t1 t0) 100))
    ;; compute action
    (Lagrangian-action Lagrangian path t0 t1)))
#+end_src

And boom, we find a path (and get to watch a pretty chart):

#+begin_src scheme
(define (run-q)
  (find-path (L-harmonic 1.0 1.0) 0. 1. :pi/2 0. 3))
#+end_src

Here it is:

#+DOWNLOADED: https://i.imgur.com/AJBpDgU.gif @ 2020-05-29 10:12:19
#+attr_org: :width 400px
#+attr_html: :width 80% :align center
[[file:images/Lagrangian_Mechanics/2020-05-29_10-12-19_AJBpDgU.gif]]

** Exercise 1.6: Minimizing action
:PROPERTIES:
:header-args+: :tangle ch1/ex1-6.scm :comments org
:END:

#+begin_src scheme :exports none
(load "ch1/utils.scm")
#+end_src

The problem asks:

#+begin_quote
Suppose we try to obtain a path by minimizing an action for an impossible
problem. For example, suppose we have a free particle and we impose endpoint
conditions on the velocities as well as the positions that are inconsistent with
the particle being free. Does the formalism protect itself from such an
unpleasant attack? You may find it illuminating to program it and see what
happens.
#+end_quote

I spent some time thinking about this, because when I attacked this book five
years ago this problem clearly tripped me up.

Let's say you take, as they suggest, some path, and impose velocity constraints
on the endpoints in addition to the position constraints.

Usually, you constrain the coordinates at each endpoint and force a path that
minimizes the action between two times. So what does it mean to impose velocity
conditions? The key is to realize that on the computer, you're forcing a path to
be composed of a bunch of discrete points. If you can force a point into the
path that is NOT controlled by the optimizer, then you can force a velocity at
some point in the path that makes no sense for minimal action.

#+begin_src scheme
(define (((parametric-path-action* win)
          Lagrangian t0 q0 offset0 t1 q1 offset1)
         intermediate-qs)
  (let ((intermediate-qs* (append (list (- q0 offset0))
                                  intermediate-qs
                                  (list (+ q1 offset1)))))
    (let ((path (make-path t0 q0 t1 q1 intermediate-qs*)))
      ;; display path
      (graphics-clear win)
      (plot-function win path t0 t1 (/ (- t1 t0) 100))
      ;; compute action
      (Lagrangian-action Lagrangian path t0 t1))))

;; Version of find path that allows for an offset to the initial and
;; final points.

(define ((find-path* win) L t0 q0 offset0 t1 q1 offset1 n)
  (let ((initial-qs (linear-interpolants q0 q1 n)))
    (let* ((action (parametric-path-action* win))
           (minimizing-qs
            (multidimensional-minimize
             (action L t0 q0 offset0 t1 q1 offset1)
             initial-qs)))
      (make-path t0 q0 t1 q1 minimizing-qs))))

;; This runs (and graphs!) the motion of a free particle using the
;; fucked up path.
(define (one-six offset0 offset1 n)
  (let* ((tmax 10)
         (win (frame -1 (+ tmax 1) 0. (+ 1.2 offset0 offset1)))
         (find (find-path* win))
         (L (L-free-particle 3.0))
         (path (find L
                     0. 1. offset0
                     tmax 0. offset1
                     n)))
    (Lagrangian-action L path 0 tmax)))
#+end_src

What happens when you program this? You get a funky, wiggly path like this:
(insert the gif!)

And you can show that the action you calculate is NOT in fact the minimum.
Here's an interface that says "take 3 interpolated points, and force an offset
point of a small amount into the action.

#+begin_src scheme :export both
(one-six 0 0 3)
#+end_src

#+begin_src scheme :export both
(one-six 0.2 0 3)
#+end_src

You __still__ can get the process to converge! But that is only because you're
not minimizing action with respect to some Lagrangian anymore; you're minimizing
the action of two constraints. You have the Lagrangian, and then the warring
goal of the polynomial interpolation. At some point, the minimizer breaks as you
almost certainly oscillate between two paths, as each constraint tugs at you.

If you make the impulse too big, then the war is too hardcore and the process
never converges. But it's important to note here the details of the optimizer.
The only reason this can "work" is settings on the optimizer.

** Exercise 1.7: Properties of $\delta$

** Exercise 1.8: Implementation of $\delta$
:PROPERTIES:
:header-args+: :tangle ch1/ex1-8.scm :comments org
:END:

This FEELS weird... but we want something that is... well, let's see.

#+begin_src scheme
(define (((delta eta) f) q)
  (let (g (lambda (eps)
            (f (q + (* eps eta)))))
    ((D g) 0)))
#+end_src

Why does this work? WELL... we need a way to force the limit in.

this is a PATH function, remember. This takes a path function, then passes it
into $\Gamma$, and composes THAT with F. F is a function from the local tuple to
some output variable. You can imagine it as the Langrangian, for example.

The local tuple type defined here can take any number of path components.

#+begin_src scheme
(define (f q)
  (let* ((Local (Up Real (UP* Real) (UP* Real)))
         (F (literal-function 'F (-> Local Real))))
    (compose F (Gamma q))))
#+end_src

This is a path function that returns a 2d path; we can use this as an example.

#+begin_src scheme
(define q (literal-function 'q (-> Real (Up Real Real))))
#+end_src

** Orbital Motion
:PROPERTIES:
:header-args+: :tangle ch1/orbital-motion.scm :comments org
:END:

Page 31.

#+begin_src scheme :exports none
(load "ch1/utils.scm")
#+end_src

#+begin_src scheme
(define ((L-orbital mass mu) local)
  (let ((q (coordinate local))
        (qdot (velocity local)))
    (+ (* 1/2 mass (square qdot))
       (/ mu (sqrt (square q))))))

(define q2
  (up (literal-function 'xi)
      (literal-function 'eta)))
#+end_src

To test:

#+begin_src scheme
((compose ((partial 1) (L-orbital 'm 'mu)) (Gamma q2)) 't)
#+end_src

** Exercise 1.9: Lagrange's equations

** Exercise 1.10: Higher-derivative Lagrangians
** Exercise 1.11: Kepler's third law
** Exercise 1.12: Lagrange's equations (code)
** Exercise 1.13: Higher-derivative Lagrangians (code)
** Exercise 1.14: Coordinate-independence of Lagrange equations

** Exercise 1.15: Equivalence
:PROPERTIES:
:header-args+: :tangle ch1/ex1-15.scm :comments org
:END:

NOTE - I have a strong suspicion here that we can show that what is actually
going on is that we end up with a total time derivative that we can ignore. The
final terms at the end that cancel... why is it that they work out the way they
do? It would be nice to try and use the time-derivative test machinery we built
to take a look there.

This one was a serious doozy. I think that this exercise can be a great way to
show off the computer algebra system, and show off the steps that I go through
to make a proof.

But I also want to pull back and stare at the formula. What is going on? What is
the meaning of the extra terms? If we can say, for example, that they're a total
time derivative, looking at the future, that would be great. There has to be a
reason that the Lagrangian doesn't change.

The same thing happens when you look at a new Lagrangian and see a "fictitious
force term" for, say, centrifugal force. There is something going on here.


Checking that composition distributes over multiplication...

#+begin_src scheme
(define f (literal-function 'f))
(define g (literal-function 'g))
(define h (literal-function 'h))
#+end_src

looks good! These are the same expression.

#+begin_src scheme
((compose (* f g) h) 't)
((* (compose f h) (compose g h)) 't)
#+end_src

 This is the general form of a path transformation; big surprise, this is very
 close to the code on page 46. I'm going to keep my version, since I don't want
 to get too confused, here.

#+begin_src scheme
(define ((F->C F) local)
  (let ((t (time local))
        (x (coordinate local))
        (v (velocity local)))
    (up t
        (F t x)
        (+ (((partial 0) F) t x)
           (* (((partial 1) F) t x)
              v)))))
#+end_src

Here's a literal function we can play with.

#+begin_src scheme
(define F*
  (literal-function 'F (-> (X Real Real) Real)))
#+end_src

Okay, boom, this is the literal function.

#+begin_src scheme
(define q-prime
  (literal-function 'q-prime))
#+end_src

This is the manual generation of q from q-prime.

#+begin_src scheme
(define ((to-q F) qp)
  (lambda (t) (F t (qp t))))
#+end_src

We can check that these are now equal. This uses C to get us to q

#+begin_src scheme
((compose (F->C F*) (Gamma q-prime)) 't)
#+end_src

And this does it by passing in q manually.

#+begin_src scheme
((Gamma ((to-q F*) q-prime)) 't)
#+end_src

I can convert the proof to code, no problem, by showing that these sides are equal.

YES!! the final step of my proof was the note that these are equal. THIS IS
HUGE!!!

#+begin_src scheme
((compose (lambda (x) (ref x 1)) ((partial 1) (F->C F*)) (Gamma q-prime)) 't)
((compose (lambda (x) (ref x 2)) ((partial 2) (F->C F*)) (Gamma q-prime)) 't)
#+end_src

Just for fun, note that this successfully pushes things inside gamma.

#+begin_src scheme
(let ((L (literal-function 'L (-> (UP Real Real Real) Real)))
      (C (F->C F*)))
  ((Gamma ((to-q ((partial 1) F*)) q-prime)) 't))

(define (p->r t polar-tuple)
  (let* ((r (ref polar-tuple 0))
         (phi (ref polar-tuple 1))
         (x (* r (cos phi)))
         (y (* r (sin phi))))
    (up x y)))

(literal-function 'q-prime (-> Real (UP Real Real)))((Gamma ((to-q p->r) )) 't)
#+end_src


trying again. get a function:

#+begin_src scheme
(define q
  ;; time to x y.
  (literal-function 'q (-> Real (UP Real Real))))

(define (C local)
  (up (time local)
     (square (coordinate local))
     (velocity local)))

((compose C (Gamma q)) 't)
#+end_src

That's good for now.

** Exercise 1.16: Central force motion
:PROPERTIES:
:header-args+: :tangle ch1/ex1-16.scm :comments org
:END:

Messing around to make sure I understand what I'm seeing in the coordinate
transforms on page 45.

#+begin_src scheme
(load "ch1/utils.scm")

(define (p->r local)
  (let* ((polar-tuple (coordinate local))
         (r (ref polar-tuple 0))
         (phi (ref polar-tuple 1))
         (x (* r (cos phi)))
         (y (* r (sin phi))))
    (up x y)))

(define (spherical->rect local)
  (let* ((spherical-tuple (coordinate local))
         (r (ref spherical-tuple 0))
         (theta (ref spherical-tuple 1))
         (phi (ref spherical-tuple 2)))
    (up (* r (sin theta) (cos phi))
        (* r (sin theta) (sin phi))
        (* r (cos theta)))))
#+end_src

Check polar:

#+begin_src scheme
(show-expression
 ((F->C p->r)
  (up 't
      (up 'r 'phi)
      (up 'rdot 'phidot))))
#+end_src

spherical coordinate change, check velocities:

#+begin_src scheme
(show-expression
 ((F->C spherical->rect)
  (up 't
      (up 'r 'theta 'phi)
      (up 'rdot 'thetadot 'phidot))))

(show-expression
 (square (ref (ref ((F->C spherical->rect)
             (up 't
                 (up 'r 'theta 'phi)
                 (up 'rdot 'thetadot 'phidot))) 2) 0)))
#+end_src

get the Langrangian from page 41:

#+begin_src scheme
(define ((L-central-rectangular m U) local)
  (let ((q (coordinate local))
        (v (velocity local)))
    (- (* 1/2 m (square v))
       (U (sqrt (square q))))))
#+end_src

BOOM, now we can compose these things!

#+begin_src scheme
(define (L-central-polar m U)
  (compose (L-central-rectangular m U)
           (F->C p->r)))

(define (L-central-spherical m U)
  (compose (L-central-rectangular m U)
           (F->C spherical->rect)))
#+end_src

Confirm the polar coordinate version...

#+begin_src scheme
(show-expression
 ((L-central-polar 'm (literal-function 'U))
  (up 't
      (up 'r 'phi)
      (up 'rdot 'phidot))))
#+end_src

BOOM, much better than calculating by hand!

#+begin_src scheme
(show-expression
 ((L-central-spherical 'm (literal-function 'U))
  (up 't
      (up 'r 'theta 'phi)
      (up 'rdot 'thetadot 'phidot))))
#+end_src


rectangular, for fun:

#+begin_src scheme
(show-expression
 ((L-central-rectangular 'm (literal-function 'U))
  (up 't
      (up 'x 'y 'z)
      (up 'xdot 'ydot 'zdot))))
#+end_src

From a note to Vinay. Langrangian coordinate transformation from spherical ->
rectangular on paper, which of course is a total nightmare, writing vx^2 +
vy^2 + vz^2 and simplifying. BUT then, of course, you write down the spherical
=> rectangular position change...

the explicit link to function composition, and how the new lagrangian is
(Lagrangian A + A<-B + B<-C)... really drives home how invertible coordinate
transforms can stack associatively through function composition. the lesson is,
prove that the code works, then trust the program to go to crazy coordinate
systems.

they add in a very simple-to-write coordinate transform that has one of the
angles depend on t. and then compose that in, and boom, basically for free
you're in rotating spherical coords.

** Exercise 1.17: Bead on a helical wire

** Exercise 1.18: Bead on a triaxial surface

** Exercise 1.19: Two-bar linkage

** Exercise 1.20: Sliding pendulum


** Exercise 1.21: A dumbbell
:PROPERTIES:
:header-args+: :tangle ch1/ex1-21.scm :comments org
:END:

The uneven dumbbell.

NOTE for when I write this up. This exercise is quite careful to NOT change the
dimension of the configuration space, when it does coordinate transformations.
We show later that you can do that, but that's the reason, good to note, why you
introduce a new variable $c$ that's equal to the distance between the dumbbells.

#+begin_src scheme
(load "ch1/utils.scm")
#+end_src

Takes in any number of up tuples and zips them into a new list of up-tuples by
taking each element.

#+begin_src scheme
(define (up-zip . ups)
  (apply vector-map up (map up->vector ups)))
#+end_src

I spent some time trying to make a nice API... but without map, filter,
reduce etc on tuples it is quite annoying. So let's go ad hoc first and see
what happens.

#+begin_src scheme
(define (KE-particle m v)
  (* 1/2 m (square v)))
#+end_src

#+begin_src scheme
;; gets the particle itself
(define ((extract-particle pieces) local i)
  (let* ((q (coordinate local))
         (qdot (velocity local))
         (indices (apply up (iota pieces (* i pieces))))
         (extract (lambda (tuple)
                    (vector-map (lambda (i) (ref tuple i))
                                indices))))
    (up (time q)
        (extract q)
        (extract qdot))))

(define (constraint q0 q1 F l)
  (* (/ F (* 2 l))
     (- (square (- q1 q0))
        (square l))))

(define ((L-free-constrained m0 m1 l) local)
  (let* ((extract (extract-particle 2))
         (p0 (extract local 0))
         (q_0 (coordinate p0))
         (qdot_0 (velocity p0))

         (p1 (extract local 1))
         (q_1 (coordinate p1))
         (qdot_1 (velocity p1))

         (F (ref (coordinate local) 4)))
    (- (+ (KE-particle m0 qdot_0)
          (KE-particle m1 qdot_1))
       (constraint q_0 q_1 F l))))

(define q-rect
  (up (literal-function 'x_0)
      (literal-function 'y_0)
      (literal-function 'x_1)
      (literal-function 'y_1)
      (literal-function 'F)))
#+end_src

This shows the lagrangian itself, which answers part b:

#+begin_src scheme
(let* ((L (L-free-constrained 'm_0 'm_1 'l))
       (f (compose L (Gamma q-rect))))
  (se (f 't)))
#+end_src

Here are the lagrange equations, confirming part b.

#+begin_src scheme
(let* ((L (L-free-constrained 'm_0 'm_1 'l))
       (f ((Lagrange-equations L) q-rect)))
  (se (f 't)))
#+end_src

Part c - make a change of coordinates.

#+begin_src scheme
(define ((cm-theta->rect m0 m1) local)
  (let* ((q (coordinate local))
         (x_cm (ref q 0))
         (y_cm (ref q 1))
         (theta (ref q 2))
         (c (ref q 3))
         (F (ref q 4))
         (total-mass (+ m0 m1))
         (m0-distance (* c (/ m1 total-mass)))
         (m1-distance (* c (/ m0 total-mass))))
    (up (- x_cm (* m0-distance (cos theta)))
        (- y_cm (* m0-distance (sin theta)))
        (+ x_cm (* m1-distance (cos theta)))
        (+ y_cm (* m1-distance (sin theta)))
        F)))

(se
 ((F->C (cm-theta->rect 'm_0 'm_1))
  (up 't
      (up 'x_cm 'y_cm 'theta 'c 'F)
      (up 'xdot_cm 'ydot_cm 'thetadot 'cdot 'Fdot))))

(define (L-free-constrained-new m0 m1 l)
  (compose (L-free-constrained m0 m1 l)
           (F->C (cm-theta->rect m0 m1))))
#+end_src

This shows the lagrangian itself, after the coordinate transformation:

#+begin_src scheme
(let* ((q (up (literal-function 'x_cm)
              (literal-function 'y_cm)
              (literal-function 'theta)
              (literal-function 'c)
              (literal-function 'F)))
       (L (L-free-constrained-new 'm_0 'm_1 'l))
       (f (compose L (Gamma q))))
  (se (f 't)))
#+end_src

Here are the lagrange equations for part c.

#+begin_src scheme
(let* ((q (up (literal-function 'x_cm)
              (literal-function 'y_cm)
              (literal-function 'theta)
              (literal-function 'c)
              (literal-function 'F)))
       (L (L-free-constrained-new 'm_0 'm_1 'l))
       (f ((Lagrange-equations L) q)))
  (se (f 't)))
#+end_src

For part d, we can substitute the constant value of c to get simplified
equations.

#+begin_src scheme
(let* ((q (up (literal-function 'x_cm)
              (literal-function 'y_cm)
              (literal-function 'theta)
              (lambda (t) 'l)
              (literal-function 'F)))
       (L (L-free-constrained-new 'm_0 'm_1 'l))
       (f ((Lagrange-equations L) q)))
  (se (f 't)))
#+end_src

For part e, I wrote this in the notebook - it is effectively identical to the
substitution that is happening on the computer, so I'm going to ignore this. You
just get more cancellations.


** Exercise 1.22: Driven pendulum

** Exercise 1.23: Fill in the details

** Exercise 1.24: Constraint forces

** Exercise 1.25: Foucalt pendulum Lagrangian

** Exercise 1.26: Properties of $D_t$

** Exercise 1.27: Lagrange equations for total time derivatives

** Exercise 1.28: Total Time Derivatives
:PROPERTIES:
:header-args+: :tangle ch1/ex1-28.scm :comments org
:END:

#+begin_src scheme
(load "ch1/utils.scm")
#+end_src

*** part A

nice, easy to guess.

#+begin_src scheme
(define ((FA m) local)
  (let ((x (coordinate local)))
    (* m x)))
#+end_src

Show the function of t, and confirm that both methods are equivalent.

#+begin_src scheme
(check-f (FA 'm)
         (literal-function 'x))
#+end_src

*** Part B

NOT a total time derivative.

Define G directly:

#+begin_src scheme
(define ((GB m) local)
  (let* ((t (time local))
         (v_x (velocity local))
         (GB0 0)
         (GB1 (* m (cos t))))
    (+ GB0 (* GB1 v_x))))
#+end_src

And show the full G, for fun:

#+begin_src scheme
(let ((f (compose (GB 'm) (Gamma (literal-function 'x)))))
  (se (f 't)))
#+end_src


It's easier to confirm that this is not a total time derivative by checking the
partials.

#+begin_src scheme
(define (GB-properties m)
  (let ((GB0 (lambda (local) 0))
        (GB1 (lambda (local)
               (* m (cos (time local))))))
    (G-properties GB0 GB1 (literal-function 'x))))
#+end_src

It's clear here that the second and third tuple entries aren't equal, so we
don't have a total time derivative.

#+begin_src scheme
(se (GB-properties 'm))
#+end_src

*** Part C

no problem, we've got a total time derivative on our hands.

#+begin_src scheme
(define (FC local)
  (let ((t (time local))
        (x (coordinate local)))
    (* x (cos t))))

(check-f FC (literal-function 'x))

(define GC-properties
  (let ((GC0 (lambda (local)
               (* -1
                  (coordinate local)
                  (sin (time local)))))
        (GC1 (lambda (local)
               (cos (time local)))))
    (G-properties GC0 GC1 (literal-function 'x))))
#+end_src

Boom, the second and third entries are equal, as we'd expect.

#+begin_src scheme
(se GC-properties)
#+end_src


*** Part D

This is NOT a total time derivative; you can tell by taking the partials
of each side, G0 and G1, as we'll see here.

#+begin_src scheme
(define GD-properties
  (let ((GD0 (lambda (local)
               (* (coordinate local)
                  (sin (time local)))))
        (GD1 (lambda (local)
               (cos (time local)))))
    (G-properties GD0 GD1 (literal-function 'x))))
#+end_src

The partials for each side don't match.

#+begin_src scheme
(se GD-properties)
#+end_src

*** Part E

This is strange to me, because I thought that this thing had to produce a tuple.

OH, but the secret is that Qdot is also a tuple, so you contract them together.

Here's the function F that we can use to derive it:

#+begin_src scheme
(define (FE local)
  (let* ((t (time local))
         (q (coordinate local))
         (x (ref q 0))
         (y (ref q 1)))
    (* (+ (square x) (square y))
       (cos t))))
#+end_src

Boom, total time derivative!

#+begin_src scheme
(check-f FE (up (literal-function 'x)
                (literal-function 'y)))
#+end_src

And let's show that we pass the tests by decomposing this into G0 and G1:

#+begin_src scheme
(define GE-properties
  (let (
        ;; any piece of the function without a velocity multiplied.
        (GE0 (lambda (local)
               (let* ((t (time local))
                      (q (coordinate local))
                      (x (ref q 0))
                      (y (ref q 1)))
                 (* -1
                    (+ (square x) (square y))
                    (sin t)))))

        ;; The pieces multiplied by velocities, split into a down tuple of
        ;; components, one for each of the coordinate components.
        (GE1 (lambda (local)
               (let* ((t (time local))
                      (q (coordinate local))
                      (x (ref q 0))
                      (y (ref q 1)))
                 (down
                  (* 2 x (cos t))
                  (* 2 y (cos t)))))))
    (G-properties GE0 GE1 (up (literal-function 'x)
                              (literal-function 'y)))))
#+end_src

BOOM!

We've recovered F; the partials are equal, and the final matrix is symmetric.

#+begin_src scheme
(se GE-properties)
#+end_src

*** Part F

This one is interesting, since the second partial is a tuple. This is not so
obvious to me, so first let's check the properties:

#+begin_src scheme
(define GF-properties
  (let (
        ;; any piece of the function without a velocity multiplied.
        (GF0 (lambda (local)
               (let* ((t (time local))
                      (q (coordinate local))
                      (x (ref q 0))
                      (y (ref q 1)))
                 (* -1
                    (+ (square x) (square y))
                    (sin t)))))

        ;; The pieces multiplied by velocities, split into a down tuple of
        ;; components, one for each of the coordinate components.
        (GF1 (lambda (local)
               (let* ((t (time local))
                      (q (coordinate local))
                      (x (ref q 0))
                      (y (ref q 1)))
                 (down
                  (+ (cube y) (* 2 x (cos t)))
                  (+ x (* 2 y (cos t))))))))
    (G-properties GF0 GF1 (up (literal-function 'x)
                              (literal-function 'y)))))
#+end_src

AND it looks like we DO have a total time derivative, maybe. We certainly pass
the first test here, since the second and third tuple entries are equal.

BUT we fail the second test; the hessian that we get from ((partial 1) G1) is
not symmetric.

#+begin_src scheme
(se GF-properties)
#+end_src


** Exercise 1.29: Galilean Invariance
:PROPERTIES:
:header-args+: :tangle ch1/ex1-29.scm :comments org
:END:

#+begin_src scheme :exports none
(load "ch1/utils.scm")
#+end_src

#+RESULTS:
: ;Loading "ch1/utils.scm"...
: ;  Loading "ch1/exdisplay.scm"... done
: ;... done
: #| check-f |#

I'll do this for a single particle, since it's annoying to get the sum going
for many; and the lagrangian is additive, so no problem.

#+begin_src scheme
(define (uniform-translate-shift->rect local)
  (let* ((t (time local))
         (q (coordinate local))
         (xprime (ref q 0))
         (delta_x (ref q 1))
         (delta_v (ref q 2)))
    (+ xprime delta_x (* t delta_v))))

(define (L-translate-shift m)
  (compose (L-free-particle m)
           (F->C uniform-translate-shift->rect)))
#+end_src

#+RESULTS:
: #| uniform-translate-shift->rect |#
:
: #| L-translate-shift |#

First, confirm that if we have a constant, we get what we expected from paper.

#+begin_src scheme :results value raw :exports both :cache yes
(let* ((q (up (literal-function 'xprime)
              (lambda (t) 'Delta_x)
              (lambda (t) 'Delta_v)))
       (f (compose (L-translate-shift 'm) (Gamma q))))
  (->tex-equation (f 't)))
#+end_src

#+RESULTS[5d2b4de08cfab4779bf7cdab31d518191b40a4d2]:
\[\begin{equation}
{{1}\over {2}} {{\Delta}_{v}}^{2} m + {\Delta}_{v} m D{x}^\prime\left( t \right) + {{1}\over {2}} m {\left( D{x}^\prime\left( t \right) \right)}^{2}
\end{equation}\]

We can change this a little to see the extra terms; substract off the free
particle lagrangian, to see the extra stuff.

#+begin_src scheme :results value raw :exports both :cache yes
(let* ((q (up (literal-function 'xprime)
              (lambda (t) 'Delta_x)
              (lambda (t) 'Delta_v)))
       (L (- (L-translate-shift 'm)
             (L-free-particle 'm)))
       (f (compose L (Gamma q))))
  (->tex-equation (f 't)))
#+end_src

#+RESULTS[c17004e61fec7edb3835203cdc99c562940bee7c]:
\[\begin{equation}
{{1}\over {2}} {{\Delta}_{v}}^{2} m + {\Delta}_{v} m D{x}^\prime\left( t \right)
\end{equation}\]

Here's the gnarly version with both entries as actual functions. Can this be a
total time derivative? It CANNOT be, because we have a $(D \Delta_v(t))^2$ term
in there, and we know that total time derivatives have to be linear in the
velocities. The function $F$ would have had to have a velocity in it, which is
not allowed.

#+begin_src scheme :results value raw :exports both :cache yes
(let* ((q (up (literal-function 'xprime)
              (literal-function 'Delta_x)
              (literal-function 'Delta_v)))
       (L (- (L-translate-shift 'm)
             (L-free-particle 'm)))
       (f (compose L (Gamma q))))
  (->tex-equation (f 't)))
#+end_src

#+RESULTS[ded4f6dec25954c9b7536153e1db8db0315cb399]:
\[ \begin{equation}
{{1}\over {2}} m {t}^{2} {\left( D{\Delta}_{v}\left( t \right) \right)}^{2} + m t D{x}^\prime\left( t \right) D{\Delta}_{v}\left( t \right) + m t D{\Delta}_{v}\left( t \right) {\Delta}_{v}\left( t \right) + m t D{\Delta}_{v}\left( t \right) D{\Delta}_{x}\left( t \right) + m D{x}^\prime\left( t \right) {\Delta}_{v}\left( t \right) + m D{x}^\prime\left( t \right) D{\Delta}_{x}\left( t \right) - {{1}\over {2}} m {\left( D{\Delta}_{v}\left( t \right) \right)}^{2} + {{1}\over {2}} m {\left( {\Delta}_{v}\left( t \right) \right)}^{2} + m {\Delta}_{v}\left( t \right) D{\Delta}_{x}\left( t \right)
\end{equation} \]

Let's simplify by making the $\Delta_v$ constant and see if there's anything so
obvious about $\Delta_x$.

We know that we have a total derivative when $\Delta_x$ is constant, and we know
that total time derivatives are linear, so let's substract off the total time
derivative and see what happens:

#+begin_src scheme :results value raw :exports both :cache yes
(let* ((q (lambda (dx)
            (up (literal-function 'xprime)
                dx
                (lambda (t) 'Delta_v))))
       (L (- (L-translate-shift 'm)
             (L-free-particle 'm)))
       (f (lambda (dx)
            (compose L (Gamma (q dx))))))
  (->tex-equation
   ((- (f (literal-function 'Delta_x))
       (f (lambda (t) 'Delta_x)))
    't)))
#+end_src

#+RESULTS[1a9463beb2f26c1661f1978633ca830ba12f73ec]:
\[\begin{equation}
{\Delta}_{v} m D{\Delta}_{x}\left( t \right) + m D{x}^\prime\left( t \right) D{\Delta}_{x}\left( t \right)
\end{equation}\]

Take a look. there is a quadratic velocity term in here! We have $D \Delta_x(t)
D x'(t)$. This is not allowed in a total time derivative.

SO, only if the shift and uniform translation are constant do we not affect the
Lagrangian value.

** Exercise 1.30: Orbits in a central potential
** Exercise 1.31: Foucault pendulum evolution
** Exercise 1.32: Time-dependent constraints
** Exercise 1.33: Falling off a log
** Exercise 1.34: Driven spherical pendulum
** Exercise 1.35: Restricted equations of motion
** Exercise 1.36: Noether integral
** Exercise 1.37: Velocity transformation
** Exercise 1.38: Properties of $E$
** Exercise 1.39: Combining Lagrangians
** Exercise 1.40: Bead on a triaxial surface
** Exercise 1.41: Motion of a tiny golf ball
** Exercise 1.42: Augmented Lagrangian
** Exercise 1.43: A numerical investigation
** Exercise 1.44: Double pendulum behavior

* Rigid Bodies

** Exercise 2.1
** Exercise 2.2
** Exercise 2.3
** Exercise 2.4
** Exercise 2.5
** Exercise 2.6
** Exercise 2.7
** Exercise 2.8
** Exercise 2.9
** Exercise 2.10
** Exercise 2.11
** Exercise 2.12
** Exercise 2.13
** Exercise 2.14
** Exercise 2.15
** Exercise 2.16
** Exercise 2.17
** Exercise 2.18
** Exercise 2.19
** Exercise 2.20

* Hamiltonian Mechanics

** Exercise 3.1
** Exercise 3.2
** Exercise 3.3
** Exercise 3.4
** Exercise 3.5
** Exercise 3.6
** Exercise 3.7
** Exercise 3.8
** Exercise 3.9
** Exercise 3.10
** Exercise 3.11
** Exercise 3.12
** Exercise 3.13
** Exercise 3.14
** Exercise 3.15
** Exercise 3.16

* Phase Space Structure

** Exercise 4.0
** Exercise 4.1
** Exercise 4.2
** Exercise 4.3
** Exercise 4.4
** Exercise 4.5
** Exercise 4.6
** Exercise 4.7
** Exercise 4.8
** Exercise 4.9
** Exercise 4.10

* Canonical Transformations

** Exercise 5.1
** Exercise 5.2
** Exercise 5.3
** Exercise 5.4
** Exercise 5.5
** Exercise 5.6
** Exercise 5.7
** Exercise 5.8
** Exercise 5.9
** Exercise 5.10
** Exercise 5.11
** Exercise 5.12
** Exercise 5.13
** Exercise 5.14
** Exercise 5.15
** Exercise 5.16
** Exercise 5.17
** Exercise 5.18
** Exercise 5.19
** Exercise 5.20

* Canonical Evolution

** Exercise 6.1
** Exercise 6.2
** Exercise 6.3
** Exercise 6.4
** Exercise 6.5
** Exercise 6.6
** Exercise 6.7
** Exercise 6.8
** Exercise 6.9
** Exercise 6.10
** Exercise 6.11
** Exercise 6.12

* Canonical Perturbation Theory

** Exercise 7.1
** Exercise 7.2
** Exercise 7.3
** Exercise 7.4
** Exercise 7.5

* Our Notation
  :PROPERTIES:
  :header-args: :eval never-export
  :END:

Notation Appendix. This is all about getting cozy with scheme, and with the
various idiosyncracies of the tuple and functional notation.

** Exercise 9.1 Chain Rule
     :PROPERTIES:
     :header-args+: :tangle ch9/ex9-1.scm :comments org
     :END:

You're supposed to do these by hand, so I'll do that in the textbook. But here,
let's redo them on the machine.

#+begin_src scheme :exports none
(load "ch1/utils.scm")
#+end_src

#+RESULTS:
: ;Loading "ch1/utils.scm"...
: ;  Loading "ch1/exdisplay.scm"... done
: ;... done
: #| check-f |#

***** Compute $\partial_0 F(x, y)$ and $\partial_1 F(x, y)$

First, let's define the functions we need.

#+begin_src scheme
(define (F x y)
  (* (square x)
     (cube y)))

(define (G x y)
  (up (F x y) y))

(define (H x y)
  (F (F x y) y))
#+end_src

#+RESULTS:
: #| F |#
:
: #| G |#
:
: #| H |#

 You can do this with explicit partials:

#+begin_src scheme :results value raw :exports both :cache yes
(let ((f (down ((partial 0) F) ((partial 1) F))))
  (->tex-equation
   (f 'x 'y)))
#+end_src

#+RESULTS[b8eaf52d98e5903b52306509dcdc8f8eeb97144c]:
\begin{equation}
\begin{bmatrix} \displaystyle{ 2 x {y}^{3}} \cr \cr \displaystyle{ 3 {x}^{2} {y}^{2}}\end{bmatrix}
\end{equation}

Or with the $D$ symbol:

#+begin_src scheme :results value raw :exports both :cache yes
(->tex-equation
 ((D F) 'x 'y))
#+end_src

#+RESULTS[f3fba605ac97a3ebd30b4a96aca31eed921e2e93]:
\begin{equation}
\begin{bmatrix} \displaystyle{ 2 x {y}^{3}} \cr \cr \displaystyle{ 3 {x}^{2} {y}^{2}}\end{bmatrix}
\end{equation}

Or, we could show that they're equivalent this way:

#+begin_src scheme :results value raw :exports both :cache yes
(let ((f (down ((partial 0) F) ((partial 1) F))))
  (->tex-equation
   (- ((D F) 'x 'y)
      (f 'x 'y))))
#+end_src

#+RESULTS[bbfc31a98ddca1b434403a34cefb730e354f1be8]:
\begin{equation}
\begin{bmatrix} \displaystyle{ 0} \cr \cr \displaystyle{ 0}\end{bmatrix}
\end{equation}

***** Compute $\partial_0 F(F(x, y), y)$ and $\partial_1 F(F(x, y), y)$

$H$ is already that composition, so:

#+begin_src scheme :results value raw :exports both :cache yes
(->tex-equation
 ((D H) 'x 'y))
#+end_src

#+RESULTS[22a0dfcbcf713d36b0f899b6baac6dbf1ec4b56d]:
\begin{equation}
\begin{bmatrix} \displaystyle{ 4 {x}^{3} {y}^{9}} \cr \cr \displaystyle{ 9 {x}^{4} {y}^{8}}\end{bmatrix}
\end{equation}

***** Compute $\partial_0 G(x, y)$ and $\partial_1 G(x, y)$

#+begin_src scheme :results value raw :exports both :cache yes
(->tex-equation
 ((D G) 'x 'y))
#+end_src

#+RESULTS[548f447f81ffe817f686965fb5fdc1d0cbecc5f9]:
\begin{equation}
\begin{bmatrix} \displaystyle{ \begin{pmatrix} \displaystyle{ 2 x {y}^{3}} \cr \cr \displaystyle{ 0}\end{pmatrix}} \cr \cr \displaystyle{ \begin{pmatrix} \displaystyle{ 3 {x}^{2} {y}^{2}} \cr \cr \displaystyle{ 1}\end{pmatrix}}\end{bmatrix}
\end{equation}

***** Compute $DF(a, b)$, $DG(3, 5)$ and $DH(3a^2, 5b^3)$

#+begin_src scheme :results value raw :exports both :cache yes
(->tex-equation
 (up ((D F) 'a 'b)
     ((D G) 3 5)
     ((D H) (* 3 (square 'a)) (* 5 (cube 'b)))))
#+end_src

#+RESULTS[e0ef4bfc15551f9d05baeb3970cd8dafaf02db65]:
\begin{equation}
\begin{pmatrix} \displaystyle{ \begin{bmatrix} \displaystyle{ 2 a {b}^{3}} \cr \cr \displaystyle{ 3 {a}^{2} {b}^{2}}\end{bmatrix}} \cr \cr \displaystyle{ \begin{bmatrix} \displaystyle{ \begin{pmatrix} \displaystyle{ 750} \cr \cr \displaystyle{ 0}\end{pmatrix}} \cr \cr \displaystyle{ \begin{pmatrix} \displaystyle{ 675} \cr \cr \displaystyle{ 1}\end{pmatrix}}\end{bmatrix}} \cr \cr \displaystyle{ \begin{bmatrix} \displaystyle{ 210937500 {a}^{6} {b}^{27}} \cr \cr \displaystyle{ 284765625 {a}^{8} {b}^{24}}\end{bmatrix}}\end{pmatrix}
\end{equation}

** Exercise 9.2: Computing Derivatives
     :PROPERTIES:
     :header-args+: :tangle ch9/ex9-2.scm :comments org
     :END:

#+begin_src scheme :exports none
(load "ch1/utils.scm")
#+end_src

A further exercise is to try defining the functions so that they use explicit
tuples, so you can compose them:

#+begin_src scheme
(define (F* v)
  (let ((x (ref v 0))
        (y (ref v 1)))
    (* (square x) (cube y))))

(define (G* v)
  (let ((x (ref v 0))
        (y (ref v 1)))
    (up (F* v) y)))

(define H* (compose F* G*))
#+end_src

#+RESULTS:
: #| F* |#
:
: #| G* |#
:
: #| H* |#

to be really pro, I'd make a function that takes these as arguments and prints a
nice formatted exercise output. Let's do the final exercise, for fun:

#+begin_src scheme :results value raw :exports both :cache yes
(->tex-equation
 (up ((D F*) (up 'a 'b))
     ((D G*) (up 3 5))
     ((D H*) (up (* 3 (square 'a)) (* 5 (cube 'b))))))
#+end_src

#+RESULTS[1e43354828c8ce0ba497bcc6bd9e64c4f4e20419]:
\begin{equation}
\begin{pmatrix} \displaystyle{ \begin{bmatrix} \displaystyle{ 2 a {b}^{3}} \cr \cr \displaystyle{ 3 {a}^{2} {b}^{2}}\end{bmatrix}} \cr \cr \displaystyle{ \begin{bmatrix} \displaystyle{ \begin{pmatrix} \displaystyle{ 750} \cr \cr \displaystyle{ 0}\end{pmatrix}} \cr \cr \displaystyle{ \begin{pmatrix} \displaystyle{ 675} \cr \cr \displaystyle{ 1}\end{pmatrix}}\end{bmatrix}} \cr \cr \displaystyle{ \begin{bmatrix} \displaystyle{ 210937500 {a}^{6} {b}^{27}} \cr \cr \displaystyle{ 284765625 {a}^{8} {b}^{24}}\end{bmatrix}}\end{pmatrix}
\end{equation}

* Org-Mode Demo
  :PROPERTIES:
  :header-args: :eval no-export
  :END:

This is an example of how we might structure an org-mode file that can export
out to Github flavored Markdown, or to a PDF.

First, let's get some code loaded up and written. Here's a block that converts
polar coordinates to rectangular coordinates.

#+name: p->r
#+begin_src scheme :eval no
(define (p->r local)
  (let* ((polar-tuple (coordinate local))
         (r (ref polar-tuple 0))
         (phi (ref polar-tuple 1))
         (x (* r (cos phi)))
         (y (* r (sin phi))))
    (up x y)))
#+end_src

This is some good stuff.

#+begin_src scheme :results output :noweb yes :comments both
(load "ch1/utils.scm")

<<p->r>>

<<spherical->rect>>
#+end_src

And another, that gets us from spherical to rectangular.

#+name: spherical->rect
#+begin_src scheme :eval no
(define (spherical->rect local)
  (let* ((spherical-tuple (coordinate local))
         (r (ref spherical-tuple 0))
         (theta (ref spherical-tuple 1))
         (phi (ref spherical-tuple 2)))
    (up (* r (sin theta) (cos phi))
        (* r (sin theta) (sin phi))
        (* r (cos theta)))))
#+end_src

#+RESULTS[f4f039075baf66ba4fe071844815bfcffe281eaa]:
: ;Loading "ch1/utils.scm"... done
: #| "" |#

This block will generate a LaTeX version of the code I've supplied:

#+begin_src scheme :results value raw :exports both :cache yes
(->tex-equation
 ((+ (literal-function 'c)
     (D (literal-function 'z)))
  't)
 "eq:masterpiece")
#+end_src

#+RESULTS[b383d2f5d6c252ac04a5f44aaeaec678132b8449]:
\begin{equation}
c\left( t \right) + Dz\left( t \right)
\label{eq:masterpiece}
\end{equation}

You can even reference these with equation numbers, like Equation \eqref{eq:masterpiece} above.

#+begin_src scheme :results value :exports both :cache yes
(up 1 2 't)
#+end_src

#+RESULTS:
: #|
: (up 1 2 t)
: |#

*** Equations

Here's (a test) of $a = bc$ and more $$ \alpha_t $$ equations:

And again this is a thing:

\[
e^{i\pi} = -1
\]

\[
\int_0^\infty e^{-x^2} dx = \frac{\sqrt{\pi}}{2}
\]


$\vec{x} \dot (\vec{x} \times \vec{v}) = \vec{v} \dot (\vec{x} \times \vec{v}) =
0$

$\vec{x} \cdot (\vec{x} \times \vec{v}) = \vec{v} \dot (\vec{x} \times \vec{b}) =
0$
